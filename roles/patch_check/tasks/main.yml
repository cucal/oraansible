# Pamplona 2019 
#  Playbook which checks is a patch is applicabe to a orale home 
#   

---

- name: setting LOG variable
  set_fact:
      logfile: "{{oracle_logs_dir}}/{{ ansible_date_time.date}}:{{ansible_date_time.time}}_patch_check_by_ANSIBLE.log"

- name: setting header at logfile  
  blockinfile:  
      path: "{{logfile}}"
      create : yes
      marker: ""  
      insertbefore: BOF
      block: |
             ## Patch  {{patch}} prerrequisites check at  {{ ansible_date_time.date}}:{{ansible_date_time.time}}"        
 
- name: patch full file 
  set_fact:
     patch_file: "{{media_dir}}/PSU/{{version}}/{{type}}/{{item.file}}"
  with_items: "{{PSU}}"
  when:  item.version == "{{version}}"  and  item.type == "{{type}}" and item.patch=="{{patch}}"

- name: logging patch info 
  blockinfile:
   path: "{{logfile}}"
   marker: ""  
   insertafter: EOF
   block: |
          #===============================  {{patch}} ======================================
           Checking patch {{patch}}  against ORACLE HOME {{oracle_home}} file {{patch_file}}

- name: look for the patch 
  stat:
    path: "{{patch_file}}"
  register: exsists 

- fail:
    msg: "ERROR: Source patch  {{patch_file}}  file not found"
  when: exsists.stat.readable ==  False
   
- name: Current patches   
  shell: "{{ oracle_home }}/OPatch/opatch lsinventory"
  args:
    chdir: "{{ oracle_home }}/OPatch"
  environment:
    CV_ASSUME_DISTID: OEL7.6
    ORACLE_HOME: "{{ oracle_home }}"
    PATH: "$PATH:{{ oracle_home }}/bin:{{oracle_home}}/OPatch/" 
    LIBPATH: "$LIBPATH:{{ oracle_home }}/lib:{{ oracle_home }}/ctx/lib"
    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:{{ oracle_home }}/lib"
  register: command_output
  tags: current_patches 
  become: yes
  become_user: oracle 

- name: logging patches  
  blockinfile:
   path: "{{logfile}}"
   marker: ""  
   insertafter: EOF
   block: |
           command :
           {{command_output.cmd}}
           output :
           {{command_output.stdout}}
           error :
           {{command_output.stderr}}
 

- name: Cleaning old patch versions  
  file:
    state: absent
    path: "{{stage_directory}}/{{patch}}/"
  ignore_errors: yes 

- name: Check opatch version  
  shell: "{{oracle_home}}/OPatch/opatch prereq CheckMinimumOPatchVersion  -phBaseDir {{stage_directory}}/{{patch}}"
  args:
     chdir: "{{ oracle_home }}/OPatch"
  environment:
    CV_ASSUME_DISTID: OEL7.6
    ORACLE_HOME: "{{ oracle_home }}"
    PATH: "$PATH:{{ oracle_home }}/bin:{{oracle_home}}/OPatch/"
    LIBPATH: "$LIBPATH:{{ oracle_home }}/lib:{{ oracle_home }}/ctx/lib"
    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:{{ oracle_home }}/lib"
  register: command_output
  tags: opatch_version


- name : unzip the patch
  unarchive:
    src: "{{patch_file}}"
    remote_src: yes
    dest: "{{stage_directory}}"

- name: Check opatch version  
  shell: "{{oracle_home}}/OPatch/opatch prereq CheckMinimumOPatchVersion  -phBaseDir {{stage_directory}}/{{patch}}"
  args:
    chdir: "{{ oracle_home }}"
  environment:
    CV_ASSUME_DISTID: OEL7.6
    ORACLE_HOME: "{{ oracle_home }}"
    PATH: "$PATH:{{ oracle_home }}/bin:{{oracle_home}}/OPatch/"
    LIBPATH: "$LIBPATH:{{ oracle_home }}/lib:{{ oracle_home }}/ctx/lib"
    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:{{ oracle_home }}/lib"
  register: command_output
  tags: opatch_version



- name: logging opatch version 
  blockinfile:
   path: "{{logfile}}"
   marker: ""  
   insertafter: EOF
   block: |
           command :
           {{command_output.cmd}}
           output :
           {{command_output.stdout}}
           error :
           {{command_output.stderr}}

- name: check opatch conflics
  shell: "{{oracle_home}}/OPatch/opatch prereq CheckConflictAgainstOHWithDetail -ph {{stage_directory}}/{{patch}}"
  args:
    chdir: "{{ oracle_home }}"
  environment:
    CV_ASSUME_DISTID: OEL7.6
    ORACLE_HOME: "{{ oracle_home }}"
    PATH: "$PATH:{{ oracle_home }}/bin:{{oracle_home}}/OPatch/"
    LIBPATH: "$LIBPATH:{{ oracle_home }}/lib:{{ oracle_home }}/ctx/lib"
    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:{{ oracle_home }}/lib"
  register: opatch_output
  tags: opatch_conflicts

- name: logging opatch version 
  blockinfile:
   path: "{{logfile}}"
   marker: ""  
   insertafter: EOF
   block: |
           command :
           {{command_output.cmd}}
           output :
           {{command_output.stdout}}
           error :
           {{command_output.stderr}}